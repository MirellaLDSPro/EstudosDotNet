@page "/substituir"
@using System.IO
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@inject NavigationManager Navigation

<h3>Substituir Texto em Documento DOC</h3>

<EditForm Model="SubstituirModel" OnSubmit="OnSubmit" FormName="converter2">
    <div class="mb-3">
        <label for="docFile" class="form-label">Selecione o arquivo DOC</label>
        <InputText id="docPath" @bind-Value="SubstituirModel!.SelectedFile" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="oldText" class="form-label">Texto a ser substituído</label>
        <InputText id="oldText" @bind-Value="SubstituirModel!.OldText" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="newText" class="form-label">Novo texto</label>
        <InputText id="newText" @bind-Value="SubstituirModel!.NewText" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Substituir Texto</button>
</EditForm>

@if (!string.IsNullOrEmpty(SubstituirModel!.SuccessMessage))
{
    <div class="alert alert-success mt-3">@SubstituirModel!.SuccessMessage</div>
}

@if (!string.IsNullOrEmpty(SubstituirModel!.ErrorMessage))
{
    <div class="alert alert-danger mt-3">@SubstituirModel!.ErrorMessage</div>
}

@code {
    [SupplyParameterFromForm]
    public SubstituirModel? SubstituirModel { get; set; }

    protected override void OnInitialized() => SubstituirModel ??= new();

    private void OnSubmit()
    {
        if(SubstituirModel == null) return;

        if (string.IsNullOrEmpty(SubstituirModel!.SelectedFile))
        {
            SubstituirModel!.ErrorMessage = "Por favor, selecione um arquivo DOC.";
            return;
        }

        try
        {
            // Se `selectedFile` já for o caminho completo do arquivo:
            var tempFilePath = SubstituirModel!.SelectedFile;

            // Se `selectedFile` for apenas o nome do arquivo, você pode precisar ajustar o caminho:
            // var tempFilePath = Path.Combine("caminho_completo", selectedFile);

            ReplaceTextInDocFile(tempFilePath, SubstituirModel!.OldText, SubstituirModel!.NewText);
            SubstituirModel!.SuccessMessage = "Texto substituído com sucesso! Arquivo salvo em: " + tempFilePath;
            SubstituirModel!.ErrorMessage = null;
        }
        catch (Exception ex)
        {
            SubstituirModel!.ErrorMessage = "Erro ao processar o arquivo: " + ex.Message;
            SubstituirModel!.SuccessMessage = null;
        }
    }

    private void ReplaceTextInDocFile(string filePath, string oldText, string newText)
    {
        using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))
        {
            var body = wordDoc.MainDocumentPart.Document.Body;

            foreach (var text in body.Descendants<Text>())
            {
                if (text.Text.Contains(oldText))
                {
                    text.Text = text.Text.Replace(oldText, newText);
                }
            }

            wordDoc.MainDocumentPart.Document.Save();
        }
    }
}