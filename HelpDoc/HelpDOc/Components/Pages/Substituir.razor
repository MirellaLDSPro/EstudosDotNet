@page "/substituir"
@using System.IO
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing

<h3>Substituir Texto em Documento DOC</h3>

<div>
    <label for="docPath">Caminho do Doc modelo:</label>
    <input type="text" id="docPath" @bind="DocModelPath" class="form-control" />
</div>

<hr />

@foreach (var item in TextPairs)
{
    <div class="form-group">
        <input type="text" placeholder="Texto antigo" @bind="item.OldText" class="form-control" style="display:inline-block; width:45%;" />
        <input type="text" placeholder="Texto novo" @bind="item.NewText" class="form-control" style="display:inline-block; width:45%;" />
        <button type="button" @onclick="() => RemoveTextPair(item)" class="btn btn-danger">Remover</button>
    </div>
}

<button type="button" @onclick="AddTextPair" class="btn btn-primary">Adicionar mais um par de texto</button>
<br /><br />

<button type="button" @onclick="OnSubmitAsync" class="btn btn-success">Executar Operação</button>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success">@SuccessMessage</div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string DocModelPath { get; set; }
    private List<TextPair> TextPairs { get; set; } = new List<TextPair>();
    private string SuccessMessage { get; set; }
    private string ErrorMessage { get; set; }

    private void AddTextPair()
    {
        TextPairs.Add(new TextPair());
    }

    private void RemoveTextPair(TextPair item)
    {
        TextPairs.Remove(item);
    }

    private async Task OnSubmitAsync()
    {
        if (string.IsNullOrEmpty(DocModelPath) || TextPairs.Count == 0)
        {
            ErrorMessage = "Por favor, forneça o caminho do documento e pelo menos um par de texto.";
            return;
        }

        try
        {
            var resultFilePath = Path.GetDirectoryName(DocModelPath)+"\\resultado";
            // Cria um novo arquivo baseado no modelo
            var newFilePath = Path.Combine(resultFilePath, $"Novo_{Path.GetFileName(DocModelPath)}");
            File.Copy(DocModelPath, newFilePath, true);

            // Substitui o texto no novo arquivo
            ReplaceTextInDocFile(newFilePath, TextPairs);

            SuccessMessage = "Texto substituído com sucesso! Novo arquivo criado em: " + newFilePath;
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Erro ao processar o arquivo: " + ex.Message;
            SuccessMessage = null;
        }
    }

    private void ReplaceTextInDocFile(string filePath, List<TextPair> textPairs)
    {
        using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(filePath, true))
        {
            var body = wordDoc.MainDocumentPart.Document.Body;

            foreach (var text in body.Descendants<Text>())
            {
                foreach (var pair in textPairs)
                {
                    if (text.Text.Contains(pair.OldText))
                    {
                        text.Text = text.Text.Replace(pair.OldText, pair.NewText);
                    }
                }
            }

            wordDoc.MainDocumentPart.Document.Save();
        }
    }

    private class TextPair
    {
        public string OldText { get; set; }
        public string NewText { get; set; }
    }
}